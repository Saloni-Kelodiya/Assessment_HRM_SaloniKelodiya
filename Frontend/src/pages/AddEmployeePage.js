import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import './css/AddEmployeePage.css';

const AddEmployeePage = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    code: '',
    password: '',
    doj: '',
    dept: '',
    proj: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [employeeCount, setEmployeeCount] = useState(1); // You can keep this or remove if backend generates code

  const navigate = useNavigate();

  // Department â†’ Projects mapping
  const departmentProjects = {
    HRMS: ['Induction', 'OnBoarding'],
    Recruitment: ['IT- Recruitment', 'Non-IT- Recruitment'],
    Development: ['Web', 'Mobile', 'Software'],
    Account: ['Accounts'],
    'Digital Marketing': ['Content Awareness/Creation', 'Campaigns'],
    'Sales and Marketing': ['Sales', 'Marketing', 'Business Development'],
  };

  // Generate random password for employee
  const generatePassword = () => {
    return Math.random().toString(36).slice(-8); // simple 8-char random password
  };

  // Initialize password on mount or employeeCount change
  useEffect(() => {
    setFormData((prev) => ({
      ...prev,
      password: generatePassword(),
      code: '', // Initially empty; backend will send generated code
    }));
  }, [employeeCount]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validation: Ensure all fields except code (generated by backend) are filled
    if (
      !formData.name ||
      !formData.email ||
      !formData.password ||
      !formData.doj ||
      !formData.dept ||
      !formData.proj
    ) {
      alert('Please fill in all fields');
      return;
    }

    setIsLoading(true);

    try {
      const response = await axios.post(
        'http://127.0.0.1:8000/api/employee/add',
        {
          // Do not send code; backend generates it
          name: formData.name,
          email: formData.email,
          password: formData.password,
          doj: formData.doj,
          dept: formData.dept,
          proj: formData.proj,
        },
        {
          headers: { 'Content-Type': 'application/json' },
        }
      );

      if (response.data.success) {
        // Get generated code from backend response
        const generatedCode = response.data.employee.code;

        alert(`Employee added successfully! Employee ID: ${generatedCode}`);

        // Reset form with new password generated and show backend generated code
        const nextCount = employeeCount + 1;
        setEmployeeCount(nextCount);

        setFormData({
          name: '',
          email: '',
          code: generatedCode, // Show backend generated employee code
          password: generatePassword(),
          doj: '',
          dept: '',
          proj: '',
        });

        // Navigate to manage employee page after adding successfully
        navigate('/manage-employee');
      } else {
        throw new Error('Backend response not successful');
      }
    } catch (error) {
      console.error('Backend Error:', error);
      alert('Failed to save employee. Please check backend.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container">
      <Header />
      <main className="add-employee-main">
        <div className="add-employee-box">
          <h2>ADD EMPLOYEE</h2>
          <form className="add-employee-form" onSubmit={handleSubmit}>
            {/* Employee Name */}
            <div className="form-group">
              <label htmlFor="emp-name">Emp Name *</label>
              <input
                type="text"
                id="emp-name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                required
                placeholder="Enter employee name"
              />
            </div>

            {/* Employee ID (Auto-generated by backend) */}
            <div className="form-group">
              <label htmlFor="emp-id">Emp ID/Code *</label>
              <input
                type="text"
                id="emp-id"
                name="code"
                value={formData.code}
                readOnly
                placeholder="Will be generated automatically"
              />
            </div>

            {/* Email */}
            <div className="form-group">
              <label htmlFor="emp-email">Email *</label>
              <input
                type="email"
                id="emp-email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
                placeholder="Enter employee email"
              />
            </div>

            {/* Password (Auto-generated) */}
            <div className="form-group">
              <label htmlFor="emp-pass">Set Password *</label>
              <input
                type="text"
                id="emp-pass"
                name="password"
                value={formData.password}
                readOnly
              />
              <small style={{ color: '#666' }}>
                Password will be shared manually for now.
              </small>
            </div>

            {/* Date of Joining */}
            <div className="form-group">
              <label htmlFor="doj">Date of Joining *</label>
              <input
                type="date"
                id="doj"
                name="doj"
                value={formData.doj}
                onChange={handleChange}
                required
              />
            </div>

            {/* Department */}
            <div className="form-group">
              <label htmlFor="dept">Department *</label>
              <select
                id="dept"
                name="dept"
                value={formData.dept}
                onChange={handleChange}
                required
              >
                <option value="">Select Department</option>
                {Object.keys(departmentProjects).map((dept) => (
                  <option key={dept} value={dept}>
                    {dept}
                  </option>
                ))}
              </select>
            </div>

            {/* Project */}
            <div className="form-group">
              <label htmlFor="proj">Project *</label>
              <select
                id="proj"
                name="proj"
                value={formData.proj}
                onChange={handleChange}
                required
                disabled={!formData.dept}
              >
                <option value="">Select Project</option>
                {formData.dept &&
                  departmentProjects[formData.dept].map((proj) => (
                    <option key={proj} value={proj}>
                      {proj}
                    </option>
                  ))}
              </select>
            </div>

            {/* Submit Button */}
            <button type="submit" className="add-emp-btn" disabled={isLoading}>
              {isLoading ? 'Saving to Database...' : 'ADD EMP'}
            </button>
          </form>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default AddEmployeePage;
